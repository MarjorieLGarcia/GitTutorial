DevMarket Tutorial 
https://www.youtube.com/watch?v=WS8whF0ZK-o&list=PLwAKR305CRO-fenwcN2-IC0rgaB6vaJgD

Traversy Media : Git & GitHub Course for Beginners
https://www.youtube.com/watch?v=SWYqp7iY_Tc

Altassian Git Tutorial
https://www.atlassian.com/git/tutorials/saving-changes/git-stash

#Global config
#List all config settings
$git config -l

#Config your global settings
$git config --global user.name "First and Last Name"
$git config --global user.email username@gmail.com

#Go to Desktop
$cd Desktop

#Create a directory
$mkdir Gitting_Started

#Initialized git
$git init

#Check the status of git
$git status

#Create a file inside directory
$touch readme.md file.txt

#Open the file and edit through command line
$vi <file>
//To edit -->ESC  i
//Saved and exit -->ESC : wq

#Stash command 
//temporarily shelves (or stashes) changes you've made to your working copy 
//so you can work on something else, and then come back and re-apply them later on.
$git stash 	 //just stash tracked files
//stash untracked and tracked files 
$git stash -u 
or
$git stash --include-untracked 
//stash tracked, untracked and ignore files
$git stash -a
//bring back the changes from your stash and reapplies them to your working copy
$git stash pop //this will remove everything from stash area
$git stash apply //this will keep the files in your stash 
//to print all stashes 
$git stash list 
//to save each stash with a description meaning name
$git stash save "messages"
//to bring back a specific stash after print the list
$git stash pop stash@{<no.>}
or 
$git stash apply stash@{<no.>}
//stash diff
$git stash show
$git stash -p
or 
$git stash --patch

#Apply stash to a different branch`
$git stash branch <name> //this will save everything into the new branch
$git stash branch <name> stash@{<no.>} //save the specific stash into the new branch 

#Cleaning Stash
$git stash drop stash@{<no.>} // delete a particular stash
$git stash clear //delete all stash 

#Add project changed
$git add <file>
or
$git add .  //Add everything
or
$git add --all //Add everything

#Commit changes to the repo
$git commit -m "Messages"

#Print history of commits
$git log
or
$git log --oneline --graph

$To ignore file(s) on the commit step
$touch .gitignore
$vi .gitignore
//saved inside all the files you want to ignore
//Github Reference --> https://github.vom/github/gitignore

#Push an exiting repository from command line
$git remote add <name> <url>
$git push -u <name> <branch name>  // -u mean make it as a default
$git remote  //Will list all your remote repos

#Adding ssh key in local machine
$ssh-keygen -t rsa -b 4096 -C "<github emial>"
//-t --> Type. In this case rsa <optional>
//-b --> Bytes. In this example 4096 <optional>
//-C --> User email. Use the same email address as github user <optional>
//Accept the default location to save the key
//Choose a phrase as a passphrase, it's optional but recommended

#Adding the ssh key to the ssh agent
$eval "$(ssh-agent -s)"  // This will show us the pid agent number. Just for confirmation purpose.
$ssh-add ~/.ssh/id_rsa  //Now we are adding to the ssh agent 

#Add the ssh key into github
//Open your id_rsa.pub file with any text editor. Copy all the content.
//On your github account, go to Settings -> SSH and GPG keys
//Click new SSH key button, type a title and paste your ssh key content and add SSH key. 

#Rollback a file from the commit stage
$git rm --cached <file name>  

#Create/Delete/Rename a branch
$git branch <branch name> //this will create a new branch, but you will still on the current branch
$git checkout -b <branch name> //this will create a new branch, and switch automatically to that branch 
$git branch -D <branch name> //this will delete the specific branch 
$git branch -m "new branch name" //this will rename the current branch, so first you should be on the branch which you you one to rename

#To track/untrack a remote branch 
//First create a local branch, preferentially with the same name as the remote branch
$git branch -u origin/<branch name> //this will track the remote branch on the current branch
$git branch --unset-upstream //this will untrack the remote branch from the current branch

#List all branches that share the same commit 
$git branch --contains <commit number > 

#Assign to a branch a specific commit 
//Before to execute the command, you need to be on the target branch which you want to reset the commit
$git reset --hard <commit number> //i.e commit b8aa09031f7cfac99a3cf7bbe79a5f2ece394f66

#Switch and list branches
$git checkout <other branch name>  //Switch between branches
$git branch  //Will list all branches in your project

#Merge from one branch to other
$git merge <branch name>  //Where changes came from. 
$git branch --no-merge //will display all branch that are not merge into th current branch
$git branch --merge //will display all branch that are merge into the current branch 

#Merge using algorithm 3 ways 
$git merge -s recursive -X ignore-all-space <branch name>
//-s --> specify the algorithm, in this case recursive
//-X --> specify the option to apply, in this case ignore-all-space 

#Abort Merging
$git merge --abort

#Push a local branch into the remote repo
$git push --set-upstream <remote name> <branch name>  //this line will be require just the first time

#Git Gui
$gitk --all //will pop up a gui interface from git 

#Git diff
$git diff HEAD~ //this will display a diff screen with all the current difference on a specific file


